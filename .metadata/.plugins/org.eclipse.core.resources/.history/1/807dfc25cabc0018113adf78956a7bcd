package phoneBook.DataAccess;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import phoneBook.Contracts.BusinessObjects.IGroupXContact;
import phoneBook.Contracts.BusinessObjects.IPhoneBook;
import phoneBook.Contracts.BusinessObjects.IPhoneBookXContact;
import phoneBook.Contracts.DataAccess.IPhoneBookDA;
import phoneBook.Contracts.ObjectFactory.IBusinessObjectFactory;
import phoneBook.Entities.GroupXContact;
import phoneBook.Entities.PhoneBook;
import phoneBook.Entities.PhoneBookXContact;
import phoneBook.Repository.PhoneBookRepository;;

@Component
public class PhoneBookDA implements IPhoneBookDA {
	
	@Autowired
	private PhoneBookRepository repository;
	
	@Autowired
	IBusinessObjectFactory<IPhoneBook> businessObjectFactory;
	
	@Autowired
	IBusinessObjectFactory<IPhoneBookXContact> phoneBookXContactObjectFactory;

	@Override
	public IPhoneBook Add(IPhoneBook obj) {
		
		ModelMapper modelMapper = new ModelMapper();
		PhoneBook entity = modelMapper.map(obj, PhoneBook.class);
		
		repository.save(entity);
		
		obj.setId(entity.getId());
		
		return obj;
		
	}

	@Override
	public Boolean Update(IPhoneBook obj) {
		
		try
		{
			PhoneBook entity = repository.findById(obj.getId()).get();
		
			ModelMapper modelMapper = new ModelMapper();
			modelMapper.map(obj, entity);
		
			repository.save(entity);
			
			return true;
		}
		catch (Exception e)
		{
			return false;
		}
		
	}

	@Override
	public Boolean Delete(Integer id) {
		
		try
		{
			repository.deleteById(id);
			return true;
		}
		catch (Exception e)
		{
			return false;
		}
		
	}

	@Override
	public IPhoneBook GetDetails(Integer id) {
		
		IPhoneBook businessObject = businessObjectFactory.GetNewObject();
		
		PhoneBook entity = repository.findById(id).get();
		
		ModelMapper modelMapper = new ModelMapper();
		modelMapper.map(entity, businessObject);
		
		return businessObject;
		
	}

	@Override
	public List<IPhoneBook> GetAllForUser(Integer userId) {
		
		Iterable<PhoneBook> entities = repository.findAll();
		return CreateBusinessObjectList(entities);
		
	}

	@Override
	public List<IPhoneBook> GetAllContactsInGroup(Integer groupId) {

		Iterable<PhoneBook> entities = repository.GetAllContactsInGroup(groupId);
		return CreateBusinessObjectList(entities);

	}
	
	private List<IPhoneBook> CreateBusinessObjectList(Iterable<PhoneBook> entities)
	{
		List<IPhoneBook> list = (List<IPhoneBook>)businessObjectFactory.GetList();
		
		ModelMapper modelMapper = new ModelMapper();
	
		IPhoneBook businessObject = null;
		
		for(PhoneBook entity : entities)
		{
			businessObject = businessObjectFactory.GetNewObject();
			//businessObject.setContacts((List<IPhoneBookXContact>)phoneBookXContactObjectFactory.GetList());
			modelMapper.map(entity, businessObject);
			
			list.add(businessObject);
		}
		
		return (List<IPhoneBook>)list;
		
	}

}
